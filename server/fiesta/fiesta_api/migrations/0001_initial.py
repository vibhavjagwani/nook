# Generated by Django 3.1.7 on 2021-07-10 04:21

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='GenericActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=400)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('website', models.CharField(blank=True, max_length=500)),
                ('tag_one', models.CharField(blank=True, max_length=75, null=True)),
                ('tag_two', models.CharField(blank=True, max_length=75, null=True)),
                ('tag_three', models.CharField(blank=True, max_length=75, null=True)),
                ('review_count', models.IntegerField(blank=True, null=True)),
                ('rating', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True)),
                ('image_url', models.CharField(blank=True, max_length=500)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('price', models.CharField(blank=True, max_length=8, null=True)),
                ('alias', models.CharField(blank=True, max_length=100, null=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('longitude', models.DecimalField(blank=True, decimal_places=10, max_digits=15)),
                ('latitude', models.DecimalField(blank=True, decimal_places=10, max_digits=15)),
                ('formatted_address', models.CharField(blank=True, max_length=500)),
                ('zip_code', models.IntegerField(default=0)),
                ('city', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=50)),
                ('country', models.CharField(default='United States', max_length=50)),
                ('neighborhood', models.CharField(blank=True, max_length=100)),
                ('address1', models.CharField(blank=True, max_length=300)),
                ('address2', models.CharField(blank=True, max_length=300, null=True)),
                ('address3', models.CharField(blank=True, max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('genericactivity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fiesta_api.genericactivity')),
                ('google_place_id', models.CharField(max_length=250, unique=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fiesta_api.genericactivity',),
        ),
        migrations.CreateModel(
            name='Dessert',
            fields=[
                ('genericactivity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fiesta_api.genericactivity')),
                ('yelp_id', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fiesta_api.genericactivity',),
        ),
        migrations.CreateModel(
            name='Drinks',
            fields=[
                ('genericactivity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fiesta_api.genericactivity')),
                ('yelp_id', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fiesta_api.genericactivity',),
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('genericactivity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fiesta_api.genericactivity')),
                ('yelp_id', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fiesta_api.genericactivity',),
        ),
        migrations.AddField(
            model_name='genericactivity',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fiesta_api.location'),
        ),
        migrations.AddField(
            model_name='genericactivity',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_fiesta_api.genericactivity_set+', to='contenttypes.contenttype'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone_number', models.CharField(max_length=35, unique=True)),
                ('phone_number_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
